options {
    DEBUG_TOKEN_MANAGER = false;
	DEBUG_PARSER= false;
	DEBUG_LOOKAHEAD=false;
}


PARSER_BEGIN(Compilateur)
import java.io.InputStream;
import AST.*;
import java.util.List;
import java.util.ArrayList;
import java.io.StringReader;
import java.util.Scanner;

public class Compilateur {
private String input;


public Compilateur(String input) {
this.input = input;
ReInit(new java.io.StringReader(input));
}


public static void main(String args[]) {
try {


Scanner scanner = new Scanner(System.in);
        StringBuilder inputBuilder = new StringBuilder();
        System.out.println("Noter ;; pour valider l'expression :");
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            if (line.equals(";;")) {
                break;
            }
            inputBuilder.append(line).append("\n");
        }
        scanner.close();

        Compilateur parseur = new Compilateur(inputBuilder.toString());


 List<Expr_Pt_Virg> i=parseur.mainNT();
 System.out.println(i);

System.out.println("C'est bien une expression arithmetique");
} catch (TokenMgrError e) {
System.out.println("Ceci n'est pas une expression arithmetique");
} catch (ParseException e) {
System.out.println("Ceci n'est pas une expression arithmetique");
}
}
}




PARSER_END(Compilateur)


TOKEN : {
  < LINE_COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")? >
| < BLOCK_COMMENT: "/*" (~["*"] | ("*" ~["/"]))* "*/" >
}

SKIP : {
    " " | "\t" | "\r" | "\n"
  | <LINE_COMMENT>
  | <BLOCK_COMMENT>
}

TOKEN :
{
< NUMBER: ((["1"-"9"] (["0"-"9"])* | "0") ("."(["0"-"9"])*)?)
    | (((["0"-"9"])+ ("." (["0"-"9"])+)? | "." (["0"-"9"])+) ("e") (["-"])? (["0"-"9"])+)
    |  ("NaN") >
| < PV : ";" >
| <BOOLEAN : ("True" | "False")>
| <IMPORT: "import" >
| <Equals: "==">
| <NotEql: "!=">
| <LoEqlNb : "<=" >
| <GrEqlNb : ">=" >
| <LoStlNb : "<" >
| <GrStlNb : ">" >
| <Not : "!" >
| <And: "&&">
| <IF:"if">
| <ELSE:"else">
|< IDENTIFIER: (["a"-"z", "A"-"Z", "_"])(["a"-"z", "A"-"Z", "0"-"9", "_"])* >
}




List<Expr_Pt_Virg> mainNT() :
{
    List<Expr_Pt_Virg> commands = new ArrayList<>();
    Expr_Pt_Virg e;
}
{
    (( e = command() { if(e!=null) commands.add(e); } )*  <EOF>)
    { return commands; }
}



ExpressionA importCommand():
{Token t;}
{  <IMPORT> t=<IDENTIFIER>
{
    return new Expression_Import(t.image);
} }




Expr_Pt_Virg command():
{ExpressionA e,cond;
 Expr_Pt_Virg c,result=null;

}
{
      ( e= affectation() <PV> {result=new Expr_Pt_Virg(e); }
      |e=importCommand() <PV> {result=new Expr_Pt_Virg(e);}
      |optionalComments()  //on ignore les tokens
      | result=ifStatement() {return result;})
      {return result;}
}





Expr_Pt_Virg ifStatement():
{
    ExpressionA cond;
    List<Expr_Pt_Virg> thenCommands = new ArrayList<>();
    List<Expr_Pt_Virg> elseCommands = new ArrayList<>();
    Expr_Pt_Virg cmd;
}
{
    <IF> "(" cond=affectation() ")"
    ( "{" (cmd=command() {thenCommands.add(cmd);})* "}"
    | cmd=command() {thenCommands.add(cmd);} )
    (LOOKAHEAD(2) <ELSE>
        ( "{" (cmd=command() {elseCommands.add(cmd);})* "}"
        | cmd=command() {elseCommands.add(cmd);}
        )
    )?
    {
        return new Expr_Pt_Virg(new Condition(
            cond,
            thenCommands,
            elseCommands
        ));
    }
}




void optionalComments():
{}
{
   <LINE_COMMENT> | <BLOCK_COMMENT>
}



ExpressionA affectation():
{
    ExpressionA e;
    List<Token> idents = new ArrayList<>();
    Token t;
}
{
    (LOOKAHEAD(2) t = <IDENTIFIER> "=" { idents.add(t); })*
    e = AndExpression()
    {
        if (idents.isEmpty()) {
            return e;
        } else {
            for (int i = idents.size() - 1; i >= 0; i--) {
                e = new Affectation(idents.get(i).image, e);
            }
            return e;
        }
    }
}


ExpressionA AndExpression():
{ExpressionA e;
ExpressionA res;}
{
    e=comparaison() {res=e;}(
    <And> e=comparaison() {res=new AndExpression(res,e);})* {return res;}
}



ExpressionA comparaison():
{ExpressionA e;
ExpressionA res;}
{
 
e = expression() { res = e; } (
    <Equals>   e = expression() { res = new Equals(res, e); }
  | <NotEql>   e = expression() { res = new NotEquals(res, e); }
  | <LoEqlNb>  e = expression() { res = new LessOrEqual(res, e); }
  | <GrEqlNb>  e = expression() { res = new GreaterOrEqual(res, e); }
  | <LoStlNb>  e = expression() { res = new LessThen(res, e); }
  | <GrStlNb>  e = expression() { res = new GreaterThen(res, e); }
)* { return res; } 
}



ExpressionA expression() :

{ExpressionA e;
ExpressionA res;}
{ e=terme() {res=e;}(
"+" e=terme() {res=new Plus(res,e);}
| "-" e=terme() {res=new Moins(res,e);}
)* {return res;}
}

ExpressionA terme () :
{ExpressionA res;
ExpressionA e;}
{ e=facteur() {res=e;}(
"*" e=facteur() {res=new Mult(res,e);}
|"/" e=facteur() {res=new Div(res,e);}
)* {return res;}

}




ExpressionA facteur () :
{ExpressionA e;
Token t;}
{ "(" e=affectation() ")" {return e;}
| "-" e=facteur() {return new Neg(e);}
| <Not> e=facteur() {return new Not(e);}
| t=<NUMBER>  {return new Num(Double.parseDouble(t.image));}
| t=<BOOLEAN>  {return new Bool(Boolean.parseBoolean(t.image));}
| t=<IDENTIFIER>  {return new Identifient(t.image);}
}











