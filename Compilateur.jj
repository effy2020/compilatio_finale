PARSER_BEGIN(Compilateur)
import java.io.InputStream;
import java.io.StringReader;  
import java.util.Scanner;

public class Compilateur {
private String input;


public Compilateur(String input) {
this.input = input;
ReInit(new java.io.StringReader(input));
}


public static void main(String args[]) {
try {
Scanner scanner=new Scanner(System.in);
String input=scanner.nextLine();
scanner.close();
Compilateur parseur = new Compilateur(input);
parseur.mainNT();
System.out.println("C'est bien une expression arithmetique");
} catch (TokenMgrError e) {
System.out.println("Ceci n'est pas une expression arithmetique");
} catch (ParseException e) {
System.out.println("Ceci n'est pas une expression arithmetique");
}
}
}


PARSER_END(Compilateur)
 
SKIP :
{ " " | "\t" | "\r"}
TOKEN :
{ < NUMBER: ((["1"-"9"] (["0"-"9"])* | "0") ("."(["0"-"9"])*)?)
    | (((["0"-"9"])+ ("." (["0"-"9"])+)? | "." (["0"-"9"])+) ("e") (["-"])? (["0"-"9"])+)
    |  ("NaN") >
| < PV : ";" >
| <BOOLEAN : ("True" | "False")>  
| <IMPORT: "import" >
| <Equals: "==">
| <NotEql: "!=">
| <LoEqlNb : "<=" >
| <GrEqlNb : ">=" >
| <LoStlNb : "<" >
| <GrStlNb : ">" >
| <Not : "!" >
|< IDENTIFIER: (["a"-"z", "A"-"Z", "_"])(["a"-"z", "A"-"Z", "0"-"9", "_"])* >
}

void mainNT () :
{}
{ (command())+ }


void importCommand():
{}
{  <IMPORT> <IDENTIFIER>  <PV> } 

void command():
{}
{
    (importCommand())* comparaison() <PV>
}



void comparaison():
{}
{
expression() (<Equals> expression() | <NotEql> expression()| <LoEqlNb> expression() | <GrEqlNb> expression() | <LoStlNb> expression() | <GrStlNb> expression())* 
}


void expression () :
{}
{ terme() (
"+" terme()
| "-" terme()
)*
}
void terme () :
{}
{ facteur() (
"*" facteur()
| "/" facteur()
)*
}
void facteur () :
{}
{ "(" comparaison() ")"
| "-" facteur()
| <Not> facteur()
| <NUMBER>
|<BOOLEAN>  
}