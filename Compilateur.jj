options {
    DEBUG_TOKEN_MANAGER = false;
	DEBUG_PARSER=false;
	DEBUG_LOOKAHEAD=false ;
}


PARSER_BEGIN(Compilateur)
import java.io.InputStream;
public class Compilateur {
public static void main(String args[]) {
try {
Compilateur parseur = new Compilateur(System.in);
int i =parseur.mainNT();
System.out.println(i);
System.out.println("C'est bien une expression arithmetique");
} catch (TokenMgrError e) {
System.out.println("Ceci n'est pas une expression arithmetique");
} catch (ParseException e) {
System.out.println("Ceci n'est pas une expression arithmetique");
}
}
}
PARSER_END(Compilateur)
SKIP :
{ " " | "\t" }
TOKEN :
{ < NUMBER: ["1"-"9"] (["0"-"9"])* >
| < PV : ";" >
}
int mainNT () :
{int e;}
{ e=command() {return e;} }


int command():
{int e;}
{
    e=expression() <PV> {return e;}
}

int expression () :
{int e;
int res;}
{ e=terme()  {res=e;}
( "+" e=terme() {res=res+e;}
| "-" e=terme() {res=res-e;}
)* {return res;}
}

 

int terme () :
{int e;
int res;}
{ e=facteur()  {res=e;}
("*" e=facteur() {res=res*e;}
)* {return res;}
}


int facteur () :
{int e;
Token t;}
{ "(" e=expression() ")" {return e;}
| "-" e=facteur() {return (-e);}
| t=<NUMBER> {return Integer.parseInt(t.image);}
}